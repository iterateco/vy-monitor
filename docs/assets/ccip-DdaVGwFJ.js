import{a as e,c as t,d as n,f as r,i,l as a,n as o,o as s,p as c,r as l,s as u,u as d}from"./index-ReKllGCv.js";var f=class extends r{constructor({callbackSelector:e,cause:t,data:n,extraData:r,sender:i,urls:a}){super(t.shortMessage||`An error occurred while fetching for an offchain result.`,{cause:t,metaMessages:[...t.metaMessages||[],t.metaMessages?.length?``:[],`Offchain Gateway Call:`,a&&[`  Gateway URL(s):`,...a.map(e=>`    ${u(e)}`)],`  Sender: ${i}`,`  Data: ${n}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:`OffchainLookupError`})}},p=class extends r{constructor({result:e,url:n}){super(`Offchain gateway response is malformed. Response data must be a hex value.`,{metaMessages:[`Gateway URL: ${u(n)}`,`Response: ${t(e)}`],name:`OffchainLookupResponseMalformedError`})}},m=class extends r{constructor({sender:e,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${e}`],name:`OffchainLookupSenderMismatchError`})}};const h=`0x556f1830`,g={name:`OffchainLookup`,type:`error`,inputs:[{name:`sender`,type:`address`},{name:`urls`,type:`string[]`},{name:`callData`,type:`bytes`},{name:`callbackFunction`,type:`bytes4`},{name:`extraData`,type:`bytes`}]};async function _(t,{blockNumber:r,blockTag:s,data:c,to:l}){let{args:u}=a({data:c,abi:[g]}),[p,h,_,y,b]=u,{ccipRead:x}=t,S=x&&typeof x?.request==`function`?x.request:v;try{if(!e(l,p))throw new m({sender:p,to:l});let a=h.includes(`x-batch-gateway:true`)?await o({data:_,ccipRequest:S}):await S({data:_,sender:p,urls:h}),{data:c}=await i(t,{blockNumber:r,blockTag:s,data:n([y,d([{type:`bytes`},{type:`bytes`}],[a,b])]),to:l});return c}catch(e){throw new f({callbackSelector:y,cause:e,data:c,extraData:b,sender:p,urls:h})}}async function v({data:e,sender:n,urls:r}){let i=Error(`An unknown error occurred.`);for(let a=0;a<r.length;a++){let o=r[a],l=o.includes(`{data}`)?`GET`:`POST`,u=l===`POST`?{data:e,sender:n}:void 0,d=l===`POST`?{"Content-Type":`application/json`}:{};try{let r=await fetch(o.replace(`{sender}`,n.toLowerCase()).replace(`{data}`,e),{body:JSON.stringify(u),headers:d,method:l}),a;if(a=r.headers.get(`Content-Type`)?.startsWith(`application/json`)?(await r.json()).data:await r.text(),!r.ok){i=new s({body:u,details:a?.error?t(a.error):r.statusText,headers:r.headers,status:r.status,url:o});continue}if(!c(a)){i=new p({result:a,url:o});continue}return a}catch(e){i=new s({body:u,details:e.message,url:o})}}throw i}export{v as ccipRequest,_ as offchainLookup,g as offchainLookupAbiItem,h as offchainLookupSignature};